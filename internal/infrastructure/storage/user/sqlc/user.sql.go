// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, username, password_hash, balance, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateUserParams struct {
	ID           string    `db:"id"`
	Username     string    `db:"username"`
	PasswordHash string    `db:"password_hash"`
	Balance      int32     `db:"balance"`
	CreatedAt    time.Time `db:"created_at"`
	UpdatedAt    time.Time `db:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.PasswordHash,
		arg.Balance,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getReceivedTransactions = `-- name: GetReceivedTransactions :many
SELECT
    sender.username as from_user,
    t.receiver_id as to_user,
    t.amount,
    t.created_at as date
FROM transactions t
    JOIN users sender ON t.sender_id = sender.id AND sender.deleted_at IS NULL
WHERE t.receiver_id = $1
    AND t.transaction_type_id = 0
`

type GetReceivedTransactionsRow struct {
	FromUser string      `db:"from_user"`
	ToUser   pgtype.Text `db:"to_user"`
	Amount   int32       `db:"amount"`
	Date     time.Time   `db:"date"`
}

func (q *Queries) GetReceivedTransactions(ctx context.Context, receiverID pgtype.Text) ([]GetReceivedTransactionsRow, error) {
	rows, err := q.db.Query(ctx, getReceivedTransactions, receiverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetReceivedTransactionsRow{}
	for rows.Next() {
		var i GetReceivedTransactionsRow
		if err := rows.Scan(
			&i.FromUser,
			&i.ToUser,
			&i.Amount,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSentTransactions = `-- name: GetSentTransactions :many

SELECT
    t.sender_id as from_user,
    receiver.username as to_user,
    t.amount,
    t.created_at as date
FROM transactions t
    JOIN users receiver ON t.receiver_id = receiver.id AND receiver.deleted_at IS NULL
WHERE t.sender_id = $1
    AND t.transaction_type_id = 0
`

type GetSentTransactionsRow struct {
	FromUser string    `db:"from_user"`
	ToUser   string    `db:"to_user"`
	Amount   int32     `db:"amount"`
	Date     time.Time `db:"date"`
}

// only coin transfers
func (q *Queries) GetSentTransactions(ctx context.Context, senderID string) ([]GetSentTransactionsRow, error) {
	rows, err := q.db.Query(ctx, getSentTransactions, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSentTransactionsRow{}
	for rows.Next() {
		var i GetSentTransactionsRow
		if err := rows.Scan(
			&i.FromUser,
			&i.ToUser,
			&i.Amount,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBalanceByID = `-- name: GetUserBalanceByID :one
SELECT id, balance as coins
FROM users
WHERE users.id = $1
    AND deleted_at IS NULL
`

type GetUserBalanceByIDRow struct {
	ID    string `db:"id"`
	Coins int32  `db:"coins"`
}

func (q *Queries) GetUserBalanceByID(ctx context.Context, id string) (GetUserBalanceByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserBalanceByID, id)
	var i GetUserBalanceByIDRow
	err := row.Scan(&i.ID, &i.Coins)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id,
       username,
       password_hash,
       balance,
       created_at,
       updated_at
FROM users
WHERE username = $1
  AND deleted_at IS NULL
`

type GetUserByUsernameRow struct {
	ID           string    `db:"id"`
	Username     string    `db:"username"`
	PasswordHash string    `db:"password_hash"`
	Balance      int32     `db:"balance"`
	CreatedAt    time.Time `db:"created_at"`
	UpdatedAt    time.Time `db:"updated_at"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserIDByUsername = `-- name: GetUserIDByUsername :one

SELECT id
FROM users
WHERE username = $1
    AND deleted_at IS NULL
`

// only coin transfers
func (q *Queries) GetUserIDByUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, getUserIDByUsername, username)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getUserInventory = `-- name: GetUserInventory :many
SELECT m.name as type,
       COUNT(*) as quantity
FROM purchases p
    JOIN merch m ON p.merch_id = m.id AND m.deleted_at IS NULL
WHERE p.user_id = $1
GROUP BY m.name
`

type GetUserInventoryRow struct {
	Type     string `db:"type"`
	Quantity int64  `db:"quantity"`
}

func (q *Queries) GetUserInventory(ctx context.Context, userID string) ([]GetUserInventoryRow, error) {
	rows, err := q.db.Query(ctx, getUserInventory, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserInventoryRow{}
	for rows.Next() {
		var i GetUserInventoryRow
		if err := rows.Scan(&i.Type, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
