// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: merch.sql

package sqlc

import (
	"context"
	"time"
)

const addToInventory = `-- name: AddToInventory :exec
INSERT INTO purchases (id, user_id, merch_id, created_at)
VALUES ($1, $2, $3, $4)
`

type AddToInventoryParams struct {
	ID        string    `db:"id"`
	UserID    string    `db:"user_id"`
	MerchID   string    `db:"merch_id"`
	CreatedAt time.Time `db:"created_at"`
}

func (q *Queries) AddToInventory(ctx context.Context, arg AddToInventoryParams) error {
	_, err := q.db.Exec(ctx, addToInventory,
		arg.ID,
		arg.UserID,
		arg.MerchID,
		arg.CreatedAt,
	)
	return err
}

const getMerchByName = `-- name: GetMerchByName :one
SELECT
    id,
    name,
    price
FROM merch
WHERE name = $1
  AND deleted_at IS NULL
`

type GetMerchByNameRow struct {
	ID    string `db:"id"`
	Name  string `db:"name"`
	Price int32  `db:"price"`
}

func (q *Queries) GetMerchByName(ctx context.Context, name string) (GetMerchByNameRow, error) {
	row := q.db.QueryRow(ctx, getMerchByName, name)
	var i GetMerchByNameRow
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}
