// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rshelekhov/avito-tech-internship/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// CoinManager is an autogenerated mock type for the CoinManager type
type CoinManager struct {
	mock.Mock
}

type CoinManager_Expecter struct {
	mock *mock.Mock
}

func (_m *CoinManager) EXPECT() *CoinManager_Expecter {
	return &CoinManager_Expecter{mock: &_m.Mock}
}

// RegisterCoinTransfer provides a mock function with given fields: ctx, ct
func (_m *CoinManager) RegisterCoinTransfer(ctx context.Context, ct entity.CoinTransfer) error {
	ret := _m.Called(ctx, ct)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCoinTransfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.CoinTransfer) error); ok {
		r0 = rf(ctx, ct)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoinManager_RegisterCoinTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCoinTransfer'
type CoinManager_RegisterCoinTransfer_Call struct {
	*mock.Call
}

// RegisterCoinTransfer is a helper method to define mock.On call
//   - ctx context.Context
//   - ct entity.CoinTransfer
func (_e *CoinManager_Expecter) RegisterCoinTransfer(ctx interface{}, ct interface{}) *CoinManager_RegisterCoinTransfer_Call {
	return &CoinManager_RegisterCoinTransfer_Call{Call: _e.mock.On("RegisterCoinTransfer", ctx, ct)}
}

func (_c *CoinManager_RegisterCoinTransfer_Call) Run(run func(ctx context.Context, ct entity.CoinTransfer)) *CoinManager_RegisterCoinTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.CoinTransfer))
	})
	return _c
}

func (_c *CoinManager_RegisterCoinTransfer_Call) Return(_a0 error) *CoinManager_RegisterCoinTransfer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoinManager_RegisterCoinTransfer_Call) RunAndReturn(run func(context.Context, entity.CoinTransfer) error) *CoinManager_RegisterCoinTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserCoins provides a mock function with given fields: ctx, senderID, amount
func (_m *CoinManager) UpdateUserCoins(ctx context.Context, senderID string, amount int) error {
	ret := _m.Called(ctx, senderID, amount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, senderID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoinManager_UpdateUserCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserCoins'
type CoinManager_UpdateUserCoins_Call struct {
	*mock.Call
}

// UpdateUserCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - senderID string
//   - amount int
func (_e *CoinManager_Expecter) UpdateUserCoins(ctx interface{}, senderID interface{}, amount interface{}) *CoinManager_UpdateUserCoins_Call {
	return &CoinManager_UpdateUserCoins_Call{Call: _e.mock.On("UpdateUserCoins", ctx, senderID, amount)}
}

func (_c *CoinManager_UpdateUserCoins_Call) Run(run func(ctx context.Context, senderID string, amount int)) *CoinManager_UpdateUserCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *CoinManager_UpdateUserCoins_Call) Return(_a0 error) *CoinManager_UpdateUserCoins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoinManager_UpdateUserCoins_Call) RunAndReturn(run func(context.Context, string, int) error) *CoinManager_UpdateUserCoins_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoinManager creates a new instance of CoinManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoinManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoinManager {
	mock := &CoinManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
