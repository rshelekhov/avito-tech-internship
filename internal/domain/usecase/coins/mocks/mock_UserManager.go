// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rshelekhov/avito-tech-internship/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserManager is an autogenerated mock type for the UserManager type
type UserManager struct {
	mock.Mock
}

type UserManager_Expecter struct {
	mock *mock.Mock
}

func (_m *UserManager) EXPECT() *UserManager_Expecter {
	return &UserManager_Expecter{mock: &_m.Mock}
}

// GetUserInfoByID provides a mock function with given fields: ctx, userID
func (_m *UserManager) GetUserInfoByID(ctx context.Context, userID string) (entity.UserInfo, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfoByID")
	}

	var r0 entity.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.UserInfo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.UserInfo); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(entity.UserInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserManager_GetUserInfoByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfoByID'
type UserManager_GetUserInfoByID_Call struct {
	*mock.Call
}

// GetUserInfoByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserManager_Expecter) GetUserInfoByID(ctx interface{}, userID interface{}) *UserManager_GetUserInfoByID_Call {
	return &UserManager_GetUserInfoByID_Call{Call: _e.mock.On("GetUserInfoByID", ctx, userID)}
}

func (_c *UserManager_GetUserInfoByID_Call) Run(run func(ctx context.Context, userID string)) *UserManager_GetUserInfoByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserManager_GetUserInfoByID_Call) Return(_a0 entity.UserInfo, _a1 error) *UserManager_GetUserInfoByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserManager_GetUserInfoByID_Call) RunAndReturn(run func(context.Context, string) (entity.UserInfo, error)) *UserManager_GetUserInfoByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInfoByUsername provides a mock function with given fields: ctx, toUsername
func (_m *UserManager) GetUserInfoByUsername(ctx context.Context, toUsername string) (entity.UserInfo, error) {
	ret := _m.Called(ctx, toUsername)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfoByUsername")
	}

	var r0 entity.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.UserInfo, error)); ok {
		return rf(ctx, toUsername)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.UserInfo); ok {
		r0 = rf(ctx, toUsername)
	} else {
		r0 = ret.Get(0).(entity.UserInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, toUsername)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserManager_GetUserInfoByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfoByUsername'
type UserManager_GetUserInfoByUsername_Call struct {
	*mock.Call
}

// GetUserInfoByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - toUsername string
func (_e *UserManager_Expecter) GetUserInfoByUsername(ctx interface{}, toUsername interface{}) *UserManager_GetUserInfoByUsername_Call {
	return &UserManager_GetUserInfoByUsername_Call{Call: _e.mock.On("GetUserInfoByUsername", ctx, toUsername)}
}

func (_c *UserManager_GetUserInfoByUsername_Call) Run(run func(ctx context.Context, toUsername string)) *UserManager_GetUserInfoByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserManager_GetUserInfoByUsername_Call) Return(_a0 entity.UserInfo, _a1 error) *UserManager_GetUserInfoByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserManager_GetUserInfoByUsername_Call) RunAndReturn(run func(context.Context, string) (entity.UserInfo, error)) *UserManager_GetUserInfoByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserManager creates a new instance of UserManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserManager {
	mock := &UserManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
