// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rshelekhov/merch-store/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserManager is an autogenerated mock type for the UserManager type
type UserManager struct {
	mock.Mock
}

type UserManager_Expecter struct {
	mock *mock.Mock
}

func (_m *UserManager) EXPECT() *UserManager_Expecter {
	return &UserManager_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserManager) CreateUser(ctx context.Context, user entity.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserManager_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserManager_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user entity.User
func (_e *UserManager_Expecter) CreateUser(ctx interface{}, user interface{}) *UserManager_CreateUser_Call {
	return &UserManager_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserManager_CreateUser_Call) Run(run func(ctx context.Context, user entity.User)) *UserManager_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.User))
	})
	return _c
}

func (_c *UserManager_CreateUser_Call) Return(_a0 error) *UserManager_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserManager_CreateUser_Call) RunAndReturn(run func(context.Context, entity.User) error) *UserManager_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByName provides a mock function with given fields: ctx, username
func (_m *UserManager) GetUserByName(ctx context.Context, username string) (entity.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByName")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserManager_GetUserByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByName'
type UserManager_GetUserByName_Call struct {
	*mock.Call
}

// GetUserByName is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserManager_Expecter) GetUserByName(ctx interface{}, username interface{}) *UserManager_GetUserByName_Call {
	return &UserManager_GetUserByName_Call{Call: _e.mock.On("GetUserByName", ctx, username)}
}

func (_c *UserManager_GetUserByName_Call) Run(run func(ctx context.Context, username string)) *UserManager_GetUserByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserManager_GetUserByName_Call) Return(_a0 entity.User, _a1 error) *UserManager_GetUserByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserManager_GetUserByName_Call) RunAndReturn(run func(context.Context, string) (entity.User, error)) *UserManager_GetUserByName_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserManager creates a new instance of UserManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserManager {
	mock := &UserManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
