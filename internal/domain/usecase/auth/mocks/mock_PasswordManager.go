// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PasswordManager is an autogenerated mock type for the PasswordManager type
type PasswordManager struct {
	mock.Mock
}

type PasswordManager_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordManager) EXPECT() *PasswordManager_Expecter {
	return &PasswordManager_Expecter{mock: &_m.Mock}
}

// PasswordHash provides a mock function with given fields: password
func (_m *PasswordManager) PasswordHash(password string) (string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for PasswordHash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordManager_PasswordHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PasswordHash'
type PasswordManager_PasswordHash_Call struct {
	*mock.Call
}

// PasswordHash is a helper method to define mock.On call
//   - password string
func (_e *PasswordManager_Expecter) PasswordHash(password interface{}) *PasswordManager_PasswordHash_Call {
	return &PasswordManager_PasswordHash_Call{Call: _e.mock.On("PasswordHash", password)}
}

func (_c *PasswordManager_PasswordHash_Call) Run(run func(password string)) *PasswordManager_PasswordHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PasswordManager_PasswordHash_Call) Return(_a0 string, _a1 error) *PasswordManager_PasswordHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordManager_PasswordHash_Call) RunAndReturn(run func(string) (string, error)) *PasswordManager_PasswordHash_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePassword provides a mock function with given fields: providedPassword, passwordHash
func (_m *PasswordManager) ValidatePassword(providedPassword string, passwordHash string) error {
	ret := _m.Called(providedPassword, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(providedPassword, passwordHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordManager_ValidatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePassword'
type PasswordManager_ValidatePassword_Call struct {
	*mock.Call
}

// ValidatePassword is a helper method to define mock.On call
//   - providedPassword string
//   - passwordHash string
func (_e *PasswordManager_Expecter) ValidatePassword(providedPassword interface{}, passwordHash interface{}) *PasswordManager_ValidatePassword_Call {
	return &PasswordManager_ValidatePassword_Call{Call: _e.mock.On("ValidatePassword", providedPassword, passwordHash)}
}

func (_c *PasswordManager_ValidatePassword_Call) Run(run func(providedPassword string, passwordHash string)) *PasswordManager_ValidatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *PasswordManager_ValidatePassword_Call) Return(_a0 error) *PasswordManager_ValidatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordManager_ValidatePassword_Call) RunAndReturn(run func(string, string) error) *PasswordManager_ValidatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewPasswordManager creates a new instance of PasswordManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordManager {
	mock := &PasswordManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
